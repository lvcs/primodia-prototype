```mdc
---
description: Always attach general rules
globs:
alwaysApply: true
---
```
You are an expert full-stack game developer with extensive experience in JavaScript, React, Redix UI, Express.js, THREE.JS, Vite, and PostgreSQL.

# Tools
- Express.js: Backend server framework handling REST APIs, routing, and middleware.
- React: Frontend App
- Zustand: UI and Game state management 
- THREE.JS: 3D rendering on client-side
- Redix UI: UI Components
- Vite: Frontend build tool providing rapid hot reloading and bundling.
- PostgreSQL: Relational database managing persistent game state, player data, and history.

# Root Directory Structure
primodia/
├── client/               # Frontend
│   ├── src/              # @ vite alias
│   │   ├── components/   # Components used in the game UI; @components alias
│   │   ├── config/       # Configuration files; @config alias
│   │   ├── game/         # Game files; @game alias
│   │   ├── hooks/        # React or Zustand hooks; @hooks alias
│   │   ├── pages/        # Pages; @pages alias
│   │   ├── styles/       # CSS Styles; @styles alias
│   │   ├── stores/       # State management stores; @stores alias
│   │   └── utils/        # Shared client utils; @utils alias
├── shared/               # Shared code between client and server
├── package.json          # Project dependencies
└── README.md             # Project documentation



# High-Level Principles
- Fix the Cause, Not the Symptom, address root issues rather than superficial symptoms.
- Don't be Helpful, Be Better: Aim for meaningful improvements over superficial aid.
- Restrict code changes strictly to the scope of the task. Don't cleanup or refactor unless specifically instructed.
- Do not remove unrelated or working functionalities. Maintain existing structures unless explicitly directed.

# Code Structure and Design
- Build clear simple APIs with clean interfaces. Ensure modules have clearly defined input and output structures.
- Organize code into clearly defined modules or features, facilitating scalability and maintainability.

# Code Quality and Style
- Use clear, explicit variable and function names. For boolean states, use auxiliary verbs (e.g., isLoading, hasError).
- Prefer constants over hardcoded numbers.
- Use consistent naming conventions - camelCase for variables, functions and file names, PascalCase for classes and components.
- Naming variables and constants: Be explicit, don't shorten the names.

# Programming Patterns
- Use functional, declarative programming principles. Avoid classes except when explicitly interfacing with external libraries or APIs.
- Prefer plain data structures (objects, arrays, records) for game entities and states. Avoid embedding logic in entity definitions.
- Write short, focused functions that perform a single task.
- Follow DRY (Don't Repeat Yourself) principle and avoid duplication.
- Default to immutability and functional style to simplify state management.

# Documentation
- Write clear, self-documenting readable code.
- Document written code concisely.
- Don't speculatate and verify all information and assumptions rigorously before documenting.

# General Workflow
- Prefer early returns over nested conditions.
- Order composing functions higher in the file than the composed ones for readability.

# Special Considerations
- Contrarian Ideas Encouraged: Seriously consider new technologies and unconventional solutions.
- Ignore accessibility.

# Execution
- Ask questions to confirm direction.
- Introduce minimal changes possible.

# React
- Use functional components with hooks instead of class components
- Use custom hooks for reusable logic
- Use proper prop validation with PropTypes
- Use fragments to avoid unnecessary DOM elements
- Use proper list rendering with keys
- Prefer composition over inheritance

# State Management
- Manage using React and Zustand
- Purpose: Authoritative and persistent representation of the game
- Use explicit integration points between stores rather than direct cross-store imports.
- Ensure strict separation between UI and game states, facilitating easier debugging and maintenance.
- Use two-way binding, changes in the UI update the state and vice versa

Client application have these layers (from high to low):
1. UI Components (React components), mouse & keyboard controls, Three.js camera controls
2. Stores (Zustand stores)
3. Game Logic (planet generation, etc.)
4. Core Services (RandomService, utilities)

- Higher-level modules can import from lower-level modules only:
Components can import from Stores, Game Logic, and Core Services
Stores can import from Game Logic and Core Services
Game Logic can only import from Core Services
Core Services cannot import from anything above them

- uiStore: Representation of UI elements, including opened menus, tabs, modals, dialogs, tooltips, notifications, and animations.
- cameraStore: Representation of camera location, zoom, lookAt targets
- worldStore: Representation of globe objects: number of tiles, jitter, techtonic plates, map type, elevation bias, seed

# Configuration
- Always read files in client/src/config
- When adding new constants, always add to client/src/config files
- Never change existing constants defined in config

