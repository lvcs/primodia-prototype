```mdc
---
description: This rule explains React component patterns, hooks usage, and best practices.
globs:
alwaysApply: true
---
```
# React rules

- Use functional components with hooks instead of class components
- Use custom hooks for reusable logic
- Use proper prop validation with PropTypes
- Use fragments to avoid unnecessary DOM elements
- Use proper list rendering with keys
- Prefer composition over inheritance

# State

- Use Zustand as the primary state management solution
- Reserve Context API only for theme/locale/auth propagation, not for frequently changing state
- *Unidirectional Data Flow*: Strictly enforce UI/Controls → Store → Logic → Rendering pattern with no back-channel state updates.
- *Store Communication*: Use explicit integration points between stores rather than direct cross-store imports.

Client application have these layers (from high to low):
1. UI Components (React components)
2. Stores (Zustand stores)
3. Game Logic (planet generation, etc.)
4. Core Services (RandomService, utilities)

- *Module Dependency Management*: Higher-level modules can import from lower-level modules only, never vice versa:
Components can import from Stores, Game Logic, and Core Services
Stores can import from Game Logic and Core Services
Game Logic can only import from Core Services
Core Services cannot import from anything above them


